include: 
  - docassemble.gbls:basic-questions-gbls.yml
  - LSLetters-text.yml
  - LSLetters-questions.yml
  - LSLetters-definitions.yml
---
modules:
  - .greeting
---
metadata:
  title: |
    Legal Server Letters
  short title: |
    LS Letters
  description: |
    This interview guides a Legal Server user in 
      sending letters or emails to clients and advocates.
  authors:
    - name: Michael Hofrichter
      organization: Houston Volunteer Lawyers
  revision_date: 2019-10-22
  tags: 
    - "sidebar_assignment_program"
    - "Legalserver"
    - "Staff"
    - "everyone"
    - "Everyone"
    - "Letters"
    - "Emails"
---
mandatory: True
code: |

  menu_items = [ action_menu_item('Review Answers', 'review_answers') ]

  LSCase.name.first = "LegalServer"
  LSCase.name.last = "Case"
  if defined('ls_fields.case_email'):
    LSCase.email = ls_fields.case_email
  else:
    LSCase.email = "no-reply@hvlp.org"

  clientmessage.recipient
  if clientmessage.recipient == "client":
    if client.language == "es" or client.language == "en" or client.language == "zo" or client.language == "vi":
      clientmessage.language = client.language
    else: 
      clientmessage.language
  else: 
    clientmessage.language = "en"
  clientmessage.textoption
  if correct_letter_text == False:
    undefine('clientmessage.text')
    undefine('correct_letter_text')
    undefine('clientmessage.textoption')
  clientmessage.text
  # add a review step here where you can see the text of the letter
  # client address needs to move over. 
  if clientmessage.method == "Email":
    LS_send_email
  elif clientmessage.method == "Letter":
    LS_send_letter
  all_done
---
code: |
  # this is for emails generated and sent to recipient
  if clientmessage.recipient == "client":
    email_sent_ok = send_email(to=client, cc=[LSCase, initiator], template=editted_letter)
  elif clientmessage.recipient == "advocate":
    email_sent_ok = send_email(to=advocate, cc=[LSCase, initiator], template=editted_letter)
  elif clientmessage.recipient == "pbadvocate":
    email_sent_ok = send_email(to=pbadvocate, cc=[LSCase, initiator], template=editted_letter)
---
code: |
  # this is for letters generated and saved in case file
  if clientmessage.recipient == "client": 
    email_copy_sent_ok = send_email(to=LSCase, template=LetterGenerated, attachments=[letter_to_client.pdf, letter_to_client.docx])
  elif clientmessage.recipient == "pbadvocate": 
    email_copy_sent_ok = send_email(to=LSCase, template=LetterGenerated, attachments=[letter_to_pbadvocate.pdf, letter_to_pbadvocate.docx])
  elif clientmessage.recipient == "advocate":
    email_copy_sent_ok = send_email(to=LSCase, template=LetterGenerated, attachments=[letter_to_client.pdf, letter_to_client.docx])
---
code: |
  if defined('ls_fields.casenumber'):
    casenumber = ls_fields.casenumber
---
modules:
  - docassemble.base.util
---
objects:
  - clientmessage: DAObject
  - pbadvocate: Individual
  - LSCase: Individual
  - sender: Individual
  - initiator: Individual
---
question: |
  All Done
speak_text: True
ga id: all_done
subquestion: |
  You're all done. Please feel free to close this window.
section: conclusion
buttons:
  - Exit: exit
sets: all_done
---
question: |
  Email Sent
field: LS_send_email
subquestion: | 
  % if email_sent_ok:
  Email sent to ${ clientmessage.recipient }.
  % elif email_copy_sent_ok:
    % if clientmessage.recipient == "client":
  Error sending email to to ${ clientmessage.recipient }. It can be downloaded as letter instead of an email either as a **[PDF](${ letter_to_client.pdf.url_for() })** or a **[DOCX](${ letter_to_client.docx.url_for() })** file. The letters were sent to the case notes.
    % elif clientmessage.recipient == "pbadvocate":
  Error sending email to to ${ clientmessage.recipient }. It can be downloaded as letter instead of an email either as a **[PDF](${ letter_to_pbadvocate.pdf.url_for() })** or a **[DOCX](${ letter_to_pbadvocate.docx.url_for() })** file. The letters were sent to the case notes.
    % endif
  % else: 
    % if clientmessage.recipient == "client":
  Error sending email to to ${ clientmessage.recipient }. It can be downloaded as letter instead of an email either as a **[PDF](${ letter_to_client.pdf.url_for() })** or a **[DOCX](${ letter_to_client.docx.url_for() })** file. 
    % elif clientmessage.recipient == "pbadvocate":
  Error sending email to to ${ clientmessage.recipient }. It can be downloaded as letter instead of an email either as a **[PDF](${ letter_to_pbadvocate.pdf.url_for() })** or a **[DOCX](${ letter_to_pbadvocate.docx.url_for() })** file.
    % endif
  % endif
section: sent
ga id: email_sent
---
attachment: 
  name: letter_to_client
  filename: L${ clientmessage.text }_${ format_date(today(), format='yyyy-MM-dd')}
  docx template file: Letterhead-client.docx
  valid formats: 
    - pdf
    - docx
  variable name: letter_to_client
---
attachment: 
  name: letter_to_pbadvocate
  filename: L${ clientmessage.text }_${ format_date(today(), format='yyyy-MM-dd')}
  docx template file: Letterhead-pbadvocate.docx
  valid formats: 
    - pdf
    - docx
  variable name: letter_to_pbadvocate
---
question: |
  Letter Generated
subquestion: | 
  % if clientmessage.recipient == "client":
    % if email_copy_sent_ok:
  The letter was generated and sent to the case email. It can also be downloaded as a [PDF](${ letter_to_client.pdf.url_for() }) or a [DOCX](${ letter_to_client.docx.url_for() }) file. 
    % else: 
  The letter was generated and *not* sent to the case email. It can be downloaded as a [PDF](${ letter_to_client.pdf.url_for() }) or a [DOCX](${ letter_to_client.docx.url_for() }) file.
    % endif
  % elif clientmessage.recipient == "pbadvocate":
    % if email_copy_sent_ok:
  The letter was generated and sent to the case email. It can also be downloaded as a [PDF](${ letter_to_pbadvocate.pdf.url_for() }) or a [DOCX](${ letter_to_pbadvocate.docx.url_for() }) file. 
    % else: 
  The letter was generated and *not* sent to the case email. It can be downloaded as a [PDF](${ letter_to_pbadvocate.pdf.url_for() }) or a [DOCX](${ letter_to_pbadvocate.docx.url_for() }) file.
    % endif  
  % endif
field: LS_send_letter
section: sent
ga id: letter_generated
---
template: LetterGenerated
subject: Letter Generated by Docassemble
content: | 
  The attached letter was generated by docassemble for this case. 

  It is to be sent by mail to ${ clientmessage.recipient }. 
---
event: review_answers
question: |
  Revisit questions
subquestion: |
  These are the questions you have
  answered so far.  Click to revisit.
review:
  - Client: client.name
  - Client email: client.email
  - Advocate: advocate.name
  - Advocate email: advocate.email
  - Pro Bono volunteer: pbadvocate.name
  - Pro Bono volunteer email: pbadvocate.email
  - Letter Text: clientmessage.text
  - Letter method: clientmessage.letter
  - Language: clientmessage.language
  - Letter Recipient: clientmessage.recipient
  - Client Address: client.address
---
template: editted_letter
subject: | 
  ${ clientmessage.textoption.subject }
content: | 
  ${ clientmessage.text }