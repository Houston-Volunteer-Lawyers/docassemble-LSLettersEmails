include: 
  - docassemble.gbls:basic-questions-gbls.yml
  - docassemble.LSLettersEmails:LSLetters-customize.yml
  - docassemble.LSLettersEmails:LSLetters-questions.yml
---
modules:
  - .greeting
  - docassemble.base.util
---
features:
  use catchall: True
---
objects:
  - clientmessage: DAObject
  - pbadvocate: Individual
  - LSCase: Individual
  - sender: Individual
  - initiator: Individual
  - postalmethods: Individual
---
metadata:
  title: |
    Legal Server Letters
  short title: |
    LS Letters
  description: |
    This interview guides a Legal Server user in 
      sending letters or emails to clients and advocates.
  authors:
    - name: Michael Hofrichter
      organization: Houston Volunteer Lawyers
  revision_date: 2019-10-24
  tags: 
    - "sidebar_assignment_program"
    - "Legalserver"
    - "Staff"
    - "everyone"
    - "Everyone"
    - "Letters"
    - "Emails"
---
comment: |
  If this is not a separate objects block, it will create an error condition.
objects:
  - ls_fields: |
      LegalServerFields.using(redis_secret=redis_secret,redis_key=redis_key,client=client,advocate=advocate,
        pbadvocate=pbadvocate,initiator=initiator)
---
mandatory: True
code: |

  menu_items = [ action_menu_item('Review Answers', 'review_answers') ]
  LSCase.name.first
  initiator_email_checked
  clientmessage.recipient
  if clientmessage.recipient == "client":
    if client.language == "es" or client.language == "en" or client.language == "zo" or client.language == "vi":
      clientmessage.language = client.language
    else: 
      clientmessage.language
  else: 
    clientmessage.language = "en"
  if clientmessage.method == "Letter":
    send_via_postalmethods
    
  clientmessage.textoption
  if correct_letter_text == False:
    undefine('clientmessage.text')
    undefine('correct_letter_text')
    undefine('clientmessage.textoption')
  clientmessage.text
  
  # client address needs to move over. 
  if clientmessage.method == "Email":
    LS_send_email
  elif clientmessage.method == "Letter":
    if clientmessage.recipient == "client" and client.mailing_address_text is not None:
      client_address_confirmed
    if send_via_postalmethods == "PostalMethods":
      LS_send_letter_via_postalmethods
    else:
      LS_send_letter
  all_done
---
code: |
  if '<' in initiator.email:
    start_email = initiator.email.split('<')[1]
    finish_email = start_email.split('>')[0]
    initiator.email = finish_email
  initiator_email_checked = True
---
code: |
  # this is for emails generated and sent to recipient
  # log("trying to send email with body of " + clientmessage.text + " and a subject of " + value(clientmessage.textoption).subject + " to client " + str(client.name) + ", " + client.email + " and to initiator " + str(initiator.name) + ", " + initiator.email + " and to LSCAse " + str(LSCase.name) + ", " + LSCase.email )
  if bcc_case_email:
    if attachments_yes:
      if clientmessage.recipient == "client":
        email_sent_ok = send_email(to=[client], cc=[initiator], bcc=[LSCase], template=editted_letter, attachments=[email_attachment_files])
      elif clientmessage.recipient == "advocate":
        email_sent_ok = send_email(to=[advocate], cc=[initiator], bcc=[LSCase], template=editted_letter, attachments=[email_attachment_files])
      elif clientmessage.recipient == "pbadvocate":
        email_sent_ok = send_email(to=[pbadvocate], cc=[initiator], bcc=[LSCase], template=editted_letter, attachments=[email_attachment_files])
    else: 
      if clientmessage.recipient == "client":
        email_sent_ok = send_email(to=[client], cc=[initiator], bcc=[LSCase], template=editted_letter)
      elif clientmessage.recipient == "advocate":
        email_sent_ok = send_email(to=[advocate], cc=[initiator], bcc=[LSCase], template=editted_letter)
      elif clientmessage.recipient == "pbadvocate":
        email_sent_ok = send_email(to=[pbadvocate], cc=[initiator], bcc=[LSCase], template=editted_letter)
  else:
    if attachments_yes:
      if clientmessage.recipient == "client":
        email_sent_ok = send_email(to=[client], cc=[initiator, LSCase], template=editted_letter, attachments=[email_attachment_files])
      elif clientmessage.recipient == "advocate":
        email_sent_ok = send_email(to=[advocate], cc=[initiator, LSCase], template=editted_letter, attachments=[email_attachment_files])
      elif clientmessage.recipient == "pbadvocate":
        email_sent_ok = send_email(to=[pbadvocate], cc=[initiator, LSCase], template=editted_letter, attachments=[email_attachment_files])
    else: 
      if clientmessage.recipient == "client":
        email_sent_ok = send_email(to=[client], cc=[initiator, LSCase], template=editted_letter)
      elif clientmessage.recipient == "advocate":
        email_sent_ok = send_email(to=[advocate], cc=[initiator, LSCase], template=editted_letter)
      elif clientmessage.recipient == "pbadvocate":
        email_sent_ok = send_email(to=[pbadvocate], cc=[initiator, LSCase], template=editted_letter)
---
code: |
  # this is for emails generated and sent to recipient and sent via PostalMethods
  if clientmessage.recipient == "client":
    email_sent_ok_to_postalmethods = send_email(to=[postalmethods], cc=[initiator], bcc=[LSCase], template=editted_letter_postal, attachments=letter_to_client_via_postalmethods.pdf)
  elif clientmessage.recipient == "advocate":
    email_sent_ok_to_postalmethods = send_email(to=[postalmethods], cc=[initiator], bcc=[LSCase], template=editted_letter_postal, attachments=letter_to_advocate_via_postalmethods.pdf)
  elif clientmessage.recipient == "pbadvocate":
    email_sent_ok_to_postalmethods = send_email(to=[postalmethods], cc=[initiator], bcc=[LSCase], template=editted_letter_postal, attachments=letter_to_pbadvocate_via_postalmethods.pdf)

---
template: LetterGenerated
subject: Letter Generated by Docassemble
content: | 
  The attached letter was generated by docassemble for this case. 

  It is to be sent by mail to ${ clientmessage.recipient }. Any attachments included with the mailed letter need to be referenced in a separate attachment/case note. 
---
template: editted_letter
subject: | 
  ${ value(clientmessage.textoption).subject }
content: | 
  ${ clientmessage.text }
---
template: editted_letter_postal
subject: | 
  ${ funding_code } - ${ value(clientmessage.textoption).subject }
content: | 
  ${ clientmessage.text }
---
event: review_answers
question: |
  Revisit questions
subquestion: |
  These are the questions you have
  answered so far.  Click to revisit.
review:
  - Client: client.name
  - Client email: client.email
  - Advocate: advocate.name
  - Advocate email: advocate.email
  - Pro Bono volunteer: pbadvocate.name
  - Pro Bono volunteer email: pbadvocate.email
  - Letter Text: clientmessage.text
  - Letter method: clientmessage.letter
  - Language: clientmessage.language
  - Letter Recipient: clientmessage.recipient
  - Client Address: client.address
---
code: |
  if clientmessage.recipient == "client":
    clientmessage.toline = greeting(client, with_punctuation=False, language=client.language)
  elif clientmessage.recipient == "pbadvocate":
    if pbadvocate.gender == "male":
      pbadvocate.salutation_text = "Mr."
    elif pbadvocate.gender == "female":  
      pbadvocate.salutation_text = "Ms."
    else: 
      pbadvocate.salutation_text = pbadvocate.name.first
    clientmessage.toline = "Dear " + capitalize(pbadvocate.salutation_text) + " " + capitalize(pbadvocate.name.last)
---
code: |
  if clientmessage.recipient == "client":
    clientmessage.recipientname = client.name
  elif clientmessage.recipient == "pbadvocate":
    clientmessage.recipientname = pbadvocate.name
---
code: |
  if clientmessage.sender == "advocate":
    clientmessage.fromline = advocate.name 
  elif clientmessage.sender == "initiator":
    clientmessage.fromline =  initiator.name
---
code: |
  LSCase.name.first = "LegalServer"
  LSCase.name.last = "Case"
  if defined('ls_fields.case_email'):
    LSCase.email = ls_fields.case_email
  
---
question: | 
  What is the LegalServer Case Email Address?
fields: 
  - Email: LSCase.email
    datatype: email
---
code: | 
  postalmethods.name.first = "Postal"
  postalmethods.name.last = "Methods"
  postalmethods.email = "send@secure.postalmethods.com"
---
code: | 
  if defined('ls_fields.legal_problem_code'):
    legal_problem_code_num = int(ls_fields.legal_problem_code[0:2])
    if defined('ls_fields.special_legal_problem_code'):
      if ls_fields.special_legal_problem_code[4] == " ":
        special_legal_problem_code_num = int(ls_fields.special_legal_problem_code[0:3])
      else:
        special_legal_problem_code_num = int(ls_fields.special_legal_problem_code[0:4])
      if ls_fields.special_legal_problem_code == "N/A":
        LPC = ls_fields.legal_problem_code
      else: 
        LPC = ls_fields.special_legal_problem_code
    else:
      LPC = ls_fields.legal_problem_code
  else:
    LPC = "Legal Problem Code"
---
code: | 
  if defined('pbadvocate.name.last'):
    the_pbadvocate = pbadvocate.name
  else:
    the_pbadvocate = "There is no Pro Bono Volunteer"
---
code: |
  if defined('ls_fields.casenumber'):
    casenumber = ls_fields.casenumber
---
code: |
  # this is for letters generated, printed, and saved in case file
  email_copy_sent_ok = send_email(to=LSCase, template=LetterGenerated, attachments=[letterhead_choice.pdf, letterhead_choice.docx])
